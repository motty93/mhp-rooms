{{define "title"}}{{.Title}}{{end}}

{{define "content"}}
<div class="min-h-screen bg-gradient-to-b from-gray-900 to-gray-800 flex items-center justify-center px-4 py-12">
  <div class="max-w-md w-full">
    <!-- 部屋情報カード -->
    <div class="bg-gray-800 rounded-lg shadow-xl p-8 border border-gray-700">
      <!-- ヘッダー -->
      <div class="text-center mb-8">
        {{if .PageData.HasPassword}}
        <div class="inline-flex items-center justify-center w-16 h-16 bg-blue-600 rounded-full mb-4">
          <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
          </svg>
        </div>
        <h1 class="text-2xl font-bold text-white mb-2">部屋に参加</h1>
        <p class="text-gray-400">パスワードで保護された部屋です</p>
        {{else}}
        <div class="inline-flex items-center justify-center w-16 h-16 bg-green-600 rounded-full mb-4">
          <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1"></path>
          </svg>
        </div>
        <h1 class="text-2xl font-bold text-white mb-2">部屋に参加</h1>
        <p class="text-gray-400">この部屋に参加しますか？</p>
        {{end}}
      </div>

      <!-- 部屋情報 -->
      <div class="bg-gray-700 rounded-lg p-4 mb-6">
        <div class="flex items-center justify-between mb-3">
          <span class="text-gray-400 text-sm">部屋名</span>
          <div class="flex items-center">
            {{if .PageData.HasPassword}}
            <svg class="w-4 h-4 text-yellow-500 mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clip-rule="evenodd"></path>
            </svg>
            {{end}}
            <span class="text-white font-semibold">{{.PageData.Room.Name}}</span>
          </div>
        </div>
        <div class="flex items-center justify-between mb-3">
          <span class="text-gray-400 text-sm">部屋コード</span>
          <span class="text-blue-400 font-mono">{{.PageData.Room.RoomCode}}</span>
        </div>
        <div class="flex items-center justify-between mb-3">
          <span class="text-gray-400 text-sm">ゲーム</span>
          <span class="text-white">{{.PageData.Room.GameVersion.Name}}</span>
        </div>
        <div class="flex items-center justify-between">
          <span class="text-gray-400 text-sm">ホスト</span>
          <span class="text-white">{{.PageData.Room.Host.DisplayName}}</span>
        </div>
      </div>

      <!-- パスワード入力フォーム -->
      <div id="joinForm">
        {{if .PageData.HasPassword}}
        <div class="mb-6">
          <label for="password" class="block text-sm font-medium text-gray-300 mb-2">
            パスワード
          </label>
          <input
            type="password"
            id="password"
            class="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            placeholder="パスワードを入力してください"
            autocomplete="off"
          />
          <p id="errorMessage" class="mt-2 text-sm text-red-500 hidden"></p>
        </div>
        {{end}}

        <!-- ボタン -->
        <div class="space-y-3">
          <button
            id="joinButton"
            onclick="joinRoom()"
            class="w-full {{if .PageData.HasPassword}}bg-blue-600 hover:bg-blue-700{{else}}bg-green-600 hover:bg-green-700{{end}} text-white font-semibold py-3 px-4 rounded-lg transition duration-200 flex items-center justify-center"
          >
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1"></path>
            </svg>
            部屋に参加する
          </button>

          <a
            href="/rooms"
            class="w-full bg-gray-700 hover:bg-gray-600 text-white font-semibold py-3 px-4 rounded-lg transition duration-200 flex items-center justify-center"
          >
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
            </svg>
            部屋一覧に戻る
          </a>
        </div>
      </div>
    </div>

    <!-- 注意事項 -->
    {{if .PageData.HasPassword}}
    <div class="mt-6 text-center">
      <p class="text-gray-400 text-sm">
        パスワードは部屋のホストから共有されています。<br>
        分からない場合はホストに確認してください。
      </p>
    </div>
    {{else}}
    <div class="mt-6 text-center">
      <p class="text-gray-400 text-sm">
        参加ボタンをクリックすると、この部屋に参加できます。
      </p>
    </div>
    {{end}}
  </div>
</div>

<script>
const roomId = '{{.PageData.Room.ID}}';
const hasPassword = {{.PageData.HasPassword}};

async function joinRoom() {
  const button = document.getElementById('joinButton');
  const errorMessage = document.getElementById('errorMessage');
  const passwordInput = document.getElementById('password');

  errorMessage.classList.add('hidden');
  errorMessage.textContent = '';

  button.disabled = true;
  button.innerHTML = `
    <svg class="animate-spin h-5 w-5 mr-2 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
      <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
      <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
    </svg>
    参加中...
  `;

  try {
    const requestBody = {
      forceJoin: false,
      confirmJoin: false
    };

    if (hasPassword) {
      const password = passwordInput.value.trim();
      if (!password) {
        throw new Error('パスワードを入力してください');
      }
      requestBody.password = password;
    }

    const response = await fetch(`/rooms/${roomId}/join`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
    });

    const data = await response.json();

    if (!response.ok) {
      if (data.error === 'OTHER_ROOM_ACTIVE') {
        const confirmLeave = confirm(
          '既に他の部屋に参加しています。\n現在の部屋から退出して、この部屋に参加しますか？'
        );
        if (confirmLeave) {
          requestBody.forceJoin = true;
          const retryResponse = await fetch(`/rooms/${roomId}/join`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestBody),
          });
          const retryData = await retryResponse.json();
          if (retryResponse.ok && retryData.redirect) {
            window.location.href = retryData.redirect;
            return;
          }
        }
      } else if (data.error === 'HOST_CANNOT_JOIN') {
        throw new Error('ホスト中は他の部屋に参加できません');
      } else if (data.error === 'BLOCKED_BY_HOST') {
        throw new Error('このルームには参加できません');
      } else if (data.error === 'BLOCKED_BY_MEMBER') {
        throw new Error('ブロック関係により参加できません');
      } else if (response.status === 400 && data.error) {
        throw new Error(data.error);
      } else {
        throw new Error(data.message || '部屋への参加に失敗しました');
      }
    }

    if (data.warning === 'USER_BLOCKING_HOST' && data.requiresConfirmation) {
      const confirmJoin = confirm(data.message);
      if (confirmJoin) {
        requestBody.confirmJoin = true;
        const retryResponse = await fetch(`/rooms/${roomId}/join`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(requestBody),
        });
        const retryData = await retryResponse.json();
        if (retryResponse.ok && retryData.redirect) {
          window.location.href = retryData.redirect;
          return;
        }
      }
    }

    if (data.redirect) {
      window.location.href = data.redirect;
    } else {
      window.location.href = `/rooms/${roomId}`;
    }
  } catch (error) {
    errorMessage.textContent = error.message;
    errorMessage.classList.remove('hidden');

    button.disabled = false;
    button.innerHTML = `
      <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1"></path>
      </svg>
      部屋に参加する
    `;
  }
}

if (hasPassword) {
  document.getElementById('password').addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
      joinRoom();
    }
  });
}
</script>
{{end}}
