{{ define "room_detail_page" }}
  <div class="flex h-full" x-data="roomDetail()">
    <!-- 左側パネル -->
    <div class="w-96 h-full border-r border-gray-200 flex flex-col bg-white">
      <!-- ヘッダー部分 -->
      <div
        class="bg-white border-b border-gray-200 px-4 py-3 min-h-0 flex-shrink-0"
      >
        <div class="flex items-center space-x-3 mb-2">
          <div
            class="w-12 h-12 {{ gameVersionColor .PageData.Room.GameVersion.Code }} rounded flex items-center justify-center flex-shrink-0"
          >
            <div
              class="w-8 h-8 flex items-center justify-center text-white text-sm font-bold"
            >
              {{ .PageData.Room.GameVersion.Code }}
            </div>
          </div>
          <div class="text-gray-800 font-bold text-lg">
            {{ .PageData.Room.Name }}
          </div>
        </div>
        <div class="text-gray-600 text-sm leading-relaxed">
          <div x-show="!descriptionExpanded" class="overflow-hidden">
            <div class="max-h-10 overflow-hidden">
              {{ .PageData.Room.Description }}
            </div>
            <button
              @click="descriptionExpanded = true"
              x-show="needsExpansion"
              class="text-gray-800 hover:text-gray-600 text-xs mt-1 underline"
            >
              続きを表示
            </button>
          </div>
          <div x-show="descriptionExpanded" x-cloak>
            {{ .PageData.Room.Description }}
            <button
              @click="descriptionExpanded = false"
              class="text-gray-800 hover:text-gray-600 text-xs mt-1 underline block"
            >
              閉じる
            </button>
          </div>
        </div>
      </div>

      <!-- ユーザーリスト -->
      <div class="flex-1 px-4 pt-4 space-y-3 overflow-y-auto">
        {{ range $index, $member := .PageData.Members }}
          {{ if $member }}
            <button
              class="w-full flex items-center space-x-3 p-2 bg-gray-100 hover:bg-gray-200 rounded border-2 transition-colors cursor-pointer"
              :class="{'border-yellow-500': {{ if $member.IsHost }}
                true
              {{ else }}
                false
              {{ end }}, 'border-gray-200': {{ if not $member.IsHost }}
                true
              {{ else }}
                false
              {{ end }}}"
            >
              <img
                src="/static/images/default-avatar.png"
                class="w-8 h-8 rounded-full object-cover"
                alt="ユーザーアバター"
              />
              <span class="text-gray-800 text-sm font-medium"
                >{{ $member.DisplayName }}</span
              >
              {{ if $member.IsHost }}
                <span
                  class="text-xs bg-yellow-100 text-yellow-700 px-2 py-0.5 rounded"
                  >ホスト</span
                >
              {{ end }}
            </button>
          {{ else }}
            <div
              class="flex items-center space-x-3 p-2 bg-gray-50 rounded border border-gray-200 opacity-60"
            >
              <div
                class="w-6 h-8 bg-gray-300 rounded flex items-center justify-center"
              >
                <div class="w-4 h-6 bg-gray-500 rounded-sm"></div>
              </div>
              <span class="text-gray-400 text-sm">－</span>
            </div>
          {{ end }}
        {{ end }}
      </div>

      <!-- 部屋一覧に戻るボタン -->
      <div class="p-4 flex-shrink-0">
        <a
          href="/rooms"
          class="w-full flex items-center justify-center space-x-2 bg-gray-100 hover:bg-gray-200 text-gray-700 py-3 px-4 rounded border border-gray-300 font-medium transition-colors"
        >
          <svg
            class="w-5 h-5"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"
            />
          </svg>
          <span>部屋一覧に戻る</span>
        </a>
      </div>
    </div>

    <!-- 右側メインエリア -->
    <div class="flex-1 h-full flex flex-col">
      <!-- チャットエリア -->
      <div
        class="flex-1 relative bg-gray-100 overflow-y-auto"
        id="chat-container"
      >
        <!-- メッセージリスト -->
        <div class="p-4 space-y-4">
          <template x-for="message in messages" :key="message.id">
            <div>
              <!-- システムメッセージ -->
              <template x-if="message.type === 'system'">
                <div class="text-center">
                  <span
                    class="px-3 py-1 rounded-full text-sm"
                    :class="{
                    'bg-gray-200 text-gray-600': message.subtype === 'create',
                    'bg-green-100 text-green-700': message.subtype === 'join',
                    'bg-red-100 text-red-700': message.subtype === 'leave'
                  }"
                    x-text="message.content"
                  ></span>
                </div>
              </template>

              <!-- ユーザーメッセージ -->
              <template x-if="message.type === 'user'">
                <div
                  :class="message.isOwn ? 'flex justify-end' : 'flex items-start space-x-3'"
                >
                  <!-- 他人のメッセージ -->
                  <template x-if="!message.isOwn">
                    <img
                      :src="message.userAvatar || '/static/images/default-avatar.png'"
                      class="w-8 h-8 rounded-full object-cover flex-shrink-0"
                      :alt="message.userName + 'のアバター'"
                    />
                  </template>

                  <div :class="message.isOwn ? 'max-w-xs' : 'flex-1 max-w-xs'">
                    <div
                      class="flex items-center mb-1"
                      :class="message.isOwn ? 'justify-end' : 'space-x-2'"
                    >
                      <template x-if="!message.isOwn">
                        <button
                          class="font-medium text-gray-800 text-sm hover:text-gray-600 hover:underline transition-colors"
                          x-text="message.userName"
                        ></button>
                      </template>
                      <span
                        class="text-gray-500 text-xs"
                        x-text="formatTime(message.timestamp)"
                      ></span>
                    </div>
                    <div
                      class="rounded-lg p-3 text-sm"
                      :class="message.isOwn ? 'bg-gray-800 text-white' : 'bg-gray-200 text-gray-800'"
                      x-text="message.content"
                    ></div>
                  </div>
                </div>
              </template>
            </div>
          </template>
        </div>
      </div>

      <!-- メッセージフォーム -->
      <div class="bg-white border-t border-gray-200 p-4 flex-shrink-0">
        <form
          method="post"
          hx-post="/rooms/{{ .PageData.Room.ID }}/messages"
          hx-trigger="submit"
          hx-swap="none"
          hx-on::before-request="window.roomDetailInstance?.addOptimisticMessage()"
          hx-on::after-request="this.reset(); document.getElementById('message-input').focus()"
          class="flex space-x-3"
        >
          <input
            id="message-input"
            type="text"
            name="message"
            placeholder="メッセージを入力..."
            class="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-800 focus:border-transparent"
            :disabled="!$store.auth.initialized || !$store.auth.isAuthenticated"
            required
          />
          <button
            type="submit"
            :disabled="!$store.auth.initialized || !$store.auth.isAuthenticated"
            class="bg-gray-800 hover:bg-gray-900 text-white px-6 py-2 rounded-lg font-medium transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
          >
            送信
          </button>
        </form>
      </div>
    </div>
  </div>

<script>
function roomDetail() {
  return {
    descriptionExpanded: false,
    needsExpansion: false,
    messages: [],
    messageInput: '',
    isAuthenticated: false,
    currentUserId: null,
    roomId: '{{ .PageData.Room.ID }}',
    eventSource: null,

    async init() {
      // グローバルインスタンスとして登録
      window.roomDetailInstance = this;

      // 説明文の展開が必要かチェック
      this.checkDescriptionLength();

      // Alpine.jsの初期化を確実に待つ
      await this.waitForAlpineAuth();

      // 初期メッセージのロード
      await this.loadInitialMessages();

      // SSE接続を確立
      await this.connectSSE();

      // チャットの最下部にスクロール
      this.$nextTick(() => this.scrollToBottom());

      // ページを離れる時にSSE接続を閉じる
      window.addEventListener('beforeunload', () => {
        if (this.eventSource) {
          this.eventSource.close();
        }
      });
    },

    async waitForAlpineAuth() {
      // Alpine.jsの認証ストアが確実に初期化されるまで待つ
      let retries = 0;
      const maxRetries = 50; // 最大5秒待つ

      while (retries < maxRetries) {
        if (window.Alpine && window.Alpine.store('auth')) {
          await window.Alpine.store('auth').checkAuth();
          const isAuth = window.Alpine.store('auth').isAuthenticated;
          const user = window.Alpine.store('auth').user;

          if (isAuth && user) {
            this.isAuthenticated = true;
            this.currentUserId = user.id;
            return;
          }
        }

        await new Promise(resolve => setTimeout(resolve, 100));
        retries++;
      }

      console.warn('Alpine.js authentication initialization timeout');
    },

    checkDescriptionLength() {
      // 説明文が長い場合は展開ボタンを表示
      const description = '{{ .PageData.Room.Description }}';
      this.needsExpansion = description.length > 100;
    },

    async checkAuth() {
      // 認証状態の確認
      if (window.Alpine && Alpine.store('auth')) {
        await Alpine.store('auth').checkAuth();
        this.isAuthenticated = Alpine.store('auth').isAuthenticated;
        this.currentUserId = Alpine.store('auth').user?.id;

        // Alpine.jsが反応するように強制的に更新を通知
        this.$nextTick(() => {
          this.isAuthenticated = Alpine.store('auth').isAuthenticated;
        });
      } else {
        // Alpine.jsまたはauthストアが利用できない場合は少し待ってリトライ
        await new Promise(resolve => setTimeout(resolve, 100));
        return await this.checkAuth();
      }
    },

    async loadInitialMessages() {
      // ログからシステムメッセージを生成
      this.messages = [];

      {{ range .PageData.Logs }}
        {{ if eq .Action "create" }}
          this.messages.push({
            id: '{{ .ID }}',
            type: 'system',
            subtype: 'create',
            content: '{{ if .User }}{{ .User.DisplayName }}{{ else }}ユーザー{{ end }}さんが部屋を作成しました',
            timestamp: new Date('{{ .CreatedAt.Format "2006-01-02T15:04:05Z07:00" }}')
          });
        {{ else if eq .Action "join" }}
          this.messages.push({
            id: '{{ .ID }}',
            type: 'system',
            subtype: 'join',
            content: '{{ index .Details "user_name" }}さんが入室しました',
            timestamp: new Date('{{ .CreatedAt.Format "2006-01-02T15:04:05Z07:00" }}')
          });
        {{ else if eq .Action "leave" }}
          this.messages.push({
            id: '{{ .ID }}',
            type: 'system',
            subtype: 'leave',
            content: '{{ index .Details "user_name" }}さんが退室しました',
            timestamp: new Date('{{ .CreatedAt.Format "2006-01-02T15:04:05Z07:00" }}')
          });
        {{ end }}
      {{ end }}

      // 既存のメッセージを取得
      if (this.isAuthenticated) {
        try {
          // 認証ヘッダーを取得
          const token = Alpine.store('auth').session?.access_token;
          const headers = {};
          if (token) {
            headers['Authorization'] = `Bearer ${token}`;
          }

          const response = await fetch(`/rooms/${this.roomId}/messages?limit=20`, {
            headers: headers
          });
          if (response.ok) {
            const messages = await response.json();
            messages.forEach(msg => {
              // SupabaseユーザーIDで比較（APIレスポンスにuser.supabase_user_idが含まれている場合）
              const isOwn = msg.user.supabase_user_id === this.currentUserId;
              this.messages.push({
                id: msg.id,
                type: 'user',
                content: msg.message,
                userName: msg.user.display_name,
                userAvatar: msg.user.avatar_url || '/static/images/default-avatar.png',
                isOwn: isOwn,
                timestamp: new Date(msg.created_at)
              });
            });
          }
        } catch (err) {
          console.error('メッセージの取得に失敗しました:', err);
        }
      }
    },

    sendMessage() {
      if (!this.messageInput.trim() || !this.isAuthenticated) return;

      // メッセージを送信（仮実装）
      const newMessage = {
        id: Date.now(),
        type: 'user',
        content: this.messageInput,
        userName: Alpine.store('auth').user?.displayName || 'ゲスト',
        isOwn: true,
        timestamp: new Date()
      };

      this.messages.push(newMessage);
      this.messageInput = '';

      this.$nextTick(() => this.scrollToBottom());
    },

    formatTime(timestamp) {
      const date = new Date(timestamp);
      return `${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}`;
    },

    scrollToBottom() {
      const container = document.getElementById('chat-container');
      if (container) {
        container.scrollTop = container.scrollHeight;
      }
    },

    async connectSSE() {
      if (!this.isAuthenticated) return;

      // 既存の接続があれば閉じる
      if (this.eventSource) {
        this.eventSource.close();
        this.eventSource = null;
      }

      try {
        // 一時的なSSEトークンを取得
        const authToken = Alpine.store('auth').session?.access_token;
        if (!authToken) {
          console.error('SSE接続: 認証トークンが取得できません');
          return;
        }

        const response = await fetch(`/rooms/${this.roomId}/sse-token`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${authToken}`,
            'Content-Type': 'application/json'
          }
        });

        if (!response.ok) {
          throw new Error(`SSEトークン取得失敗: ${response.status}`);
        }

        const tokenData = await response.json();
        const sseToken = tokenData.token;

        const url = `/rooms/${this.roomId}/messages/stream?token=${encodeURIComponent(sseToken)}`;

        this.eventSource = new EventSource(url);
      } catch (error) {
        console.error('SSEトークン取得エラー:', error);
        return;
      }
      this.sseReconnectCount = (this.sseReconnectCount || 0);

      this.eventSource.addEventListener('open', (event) => {
        this.sseReconnectCount = 0; // 接続成功時にリセット
      });

      // 接続確認メッセージ
      this.eventSource.addEventListener('connected', (event) => {
        this.sseReconnectCount = 0; // 接続成功確認時にリセット
      });

      this.eventSource.addEventListener('message', (event) => {
        try {
          const data = JSON.parse(event.data);
          if (data.type === 'message') {
            this.handleNewMessage(data.data);
          } else if (data.type === 'system_message') {
            this.handleSystemMessage(data.data);
          }
        } catch (err) {
          console.error('SSEメッセージの解析エラー:', err);
        }
      });

      this.eventSource.addEventListener('error', (event) => {
        console.error('SSE接続エラー:', event, '状態:', this.eventSource.readyState);

        // 再接続の制限（最大5回まで）
        if (this.sseReconnectCount < 5) {
          this.sseReconnectCount++;
          const delay = Math.min(1000 * Math.pow(2, this.sseReconnectCount - 1), 30000); // 指数バックオフ（最大30秒）

          setTimeout(async () => {
            if (this.isAuthenticated && Alpine.store('auth').session?.access_token) {
              await this.connectSSE();
            }
          }, delay);
        } else {
          console.error('SSE最大再接続回数に達しました。手動でページをリロードしてください。');
        }
      });
    },

    handleNewMessage(message) {
      // 自分のメッセージの場合はスキップ（すでに送信時に追加されている）
      // SupabaseユーザーIDで比較
      if (message.user.supabase_user_id === this.currentUserId) return;

      // メッセージを追加
      this.messages.push({
        id: message.id,
        type: 'user',
        content: message.message,
        userName: message.user.display_name,
        userAvatar: message.user.avatar_url || '/static/images/default-avatar.png',
        isOwn: false,
        timestamp: new Date(message.created_at)
      });

      this.$nextTick(() => this.scrollToBottom());
    },

    handleSystemMessage(message) {
      // システムメッセージを追加
      this.messages.push({
        id: message.id,
        type: 'system',
        subtype: 'join', // 入室メッセージとして扱う
        content: message.message,
        timestamp: new Date()
      });

      this.$nextTick(() => this.scrollToBottom());
    },

    addOptimisticMessage() {
      const messageInput = document.getElementById('message-input');
      const messageText = messageInput.value.trim();

      if (!messageText || !Alpine.store('auth').isAuthenticated) return;

      // メッセージを即座に表示（楽観的更新）
      const newMessage = {
        id: Date.now(),
        type: 'user',
        content: messageText,
        userName: Alpine.store('auth').user?.displayName || 'ゲスト',
        userAvatar: Alpine.store('auth').user?.avatarUrl || '/static/images/default-avatar.png',
        isOwn: true,
        timestamp: new Date()
      };

      this.messages.push(newMessage);
      this.$nextTick(() => this.scrollToBottom());
    }
  };
}
</script>
{{ end }}
