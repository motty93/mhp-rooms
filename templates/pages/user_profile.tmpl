{{ define "head" }}
  <style>
    /* htmxでコンテンツが読み込まれる際のフェードインアニメーション */
    .htmx-swapping {
      opacity: 0;
      transition: opacity 300ms ease-in-out;
    }

    /* htmxインジケーター */
    .htmx-indicator {
      display: none;
    }

    .htmx-request .htmx-indicator {
      display: flex;
    }

    /* 通知スタイル */
    .notification {
      min-width: 300px;
      max-width: 500px;
    }
  </style>
  <script src="/static/js/profile.js"></script>
  <script>
    // フォロー解除確認モーダル
    function showUnfollowModal(userId, displayName, isFriend = false) {
      const modal = document.getElementById('unfollow-modal');
      const message = document.getElementById('unfollow-message');
      const confirmBtn = document.getElementById('confirm-unfollow');

      if (isFriend) {
        message.textContent = `${displayName}さんとのフレンド関係を解除しますか？`;
        confirmBtn.textContent = 'フレンド解除';
      } else {
        message.textContent = `${displayName}さんのフォローを解除しますか？`;
        confirmBtn.textContent = 'フォロー解除';
      }

      // 確認ボタンにHTMXリクエストを設定
      confirmBtn.setAttribute('hx-delete', `/api/users/${userId}/unfollow`);
      confirmBtn.setAttribute('hx-target', '#profile-card-content');
      confirmBtn.setAttribute('hx-swap', 'innerHTML');
      confirmBtn.setAttribute('onclick', 'hideUnfollowModal()');

      // HTMXを再初期化
      htmx.process(confirmBtn);

      modal.classList.remove('hidden');
    }

    function hideUnfollowModal() {
      const modal = document.getElementById('unfollow-modal');
      modal.classList.add('hidden');
    }

    // ESCキーでモーダルを閉じる
    document.addEventListener('keydown', function(event) {
      if (event.key === 'Escape') {
        hideUnfollowModal();
      }
    });

    // モーダル背景クリックで閉じる
    document.getElementById('unfollow-modal').addEventListener('click', function(event) {
      if (event.target === this) {
        hideUnfollowModal();
      }
    });
  </script>
{{ end }}

{{ define "page" }}
  {{ $profileData := .PageData }}
  <div class="container mx-auto p-4 sm:p-6 md:p-8 max-w-6xl">
    <!-- メインコンテンツ (PCではグリッドレイアウト) -->
    <main class="grid grid-cols-1 lg:grid-cols-3 gap-8">
      <!-- 左カラム: プロフィールカード -->
      <aside id="profile-card" class="lg:col-span-1">
        <div
          class="bg-white rounded-xl p-6 shadow-md sticky top-8 border border-gray-200"
        >
          <div id="profile-card-content">
            <div class="flex flex-col items-center">
              <div class="relative">
                {{ if $profileData.User.AvatarURL }}
                  <img class="w-32 h-32 rounded-full mb-4 border-4 border-white object-cover shadow-sm"
                       src="{{ stringPtr $profileData.User.AvatarURL }}" alt="{{ $profileData.User.DisplayName }} のアバター" />
                {{ else }}
                  <img class="w-32 h-32 rounded-full mb-4 border-4 border-white object-cover shadow-sm"
                       src="/static/images/default-avatar.png" alt="デフォルトアバター" />
                {{ end }}
                <span class="absolute bottom-4 right-2 bg-green-500 w-5 h-5 rounded-full border-2 border-white"
                      title="オンライン"></span>
              </div>
              <h2 class="text-2xl font-bold text-gray-800">{{ $profileData.User.DisplayName }}</h2>

              {{ if $profileData.User.Bio }}
              <p class="text-center text-gray-600 mb-6 text-sm">{{ $profileData.User.Bio }}</p>
              {{ end }}

              <!-- フォローボタン -->
              {{ template "follow_buttons.tmpl" $profileData }}

              <!-- ブロック・通報ボタン -->
              {{ template "block_report_buttons.tmpl" $profileData }}
            </div>
          </div>
        </div>
      </aside>

      <!-- 右カラム: アクティビティ -->
      <section class="lg:col-span-2">
        <div class="bg-white rounded-xl shadow-md border border-gray-200">
          <!-- タブナビゲーション -->
          <div
            x-data="{
          tab: 'rooms',
          loadTab(newTab, event) {
            if (this.tab !== newTab) {
              this.tab = newTab;
              // htmxのリクエストを手動でトリガー
              htmx.trigger(event.target, 'tabChange');
            }
          }
        }"
            class="border-b border-gray-200"
          >
            <nav class="flex space-x-2 px-4">
              <!-- 作成した部屋タブ -->
              <button
                @click="loadTab('rooms', $event)"
                :class="{'border-blue-500 text-blue-600': tab === 'rooms', 'border-transparent text-gray-500 hover:text-gray-700': tab !== 'rooms'}"
                class="py-4 px-4 block font-medium border-b-2 focus:outline-none transition-colors duration-200"
                {{ if $profileData.IsOwnProfile }}
                  hx-get="/api/profile/rooms"
                {{ else }}
                  hx-get="/api/users/{{ $profileData.User.ID }}/rooms"
                {{ end }}
                hx-trigger="tabChange"
                hx-target="#tab-content"
                hx-indicator="#tab-loader"
              >
                作成した部屋
              </button>
              <!-- アクティビティタブ -->
              <button
                @click="loadTab('activity', $event)"
                :class="{'border-blue-500 text-blue-600': tab === 'activity', 'border-transparent text-gray-500 hover:text-gray-700': tab !== 'activity'}"
                class="py-4 px-4 block font-medium border-b-2 focus:outline-none transition-colors duration-200"
                {{ if $profileData.IsOwnProfile }}
                  hx-get="/api/profile/activity"
                {{ else }}
                  hx-get="/api/users/{{ $profileData.User.ID }}/activity"
                {{ end }}
                hx-trigger="tabChange"
                hx-target="#tab-content"
                hx-indicator="#tab-loader"
              >
                アクティビティ
              </button>
              <!-- フォロワータブ -->
              <button
                @click="loadTab('followers', $event)"
                :class="{'border-blue-500 text-blue-600': tab === 'followers', 'border-transparent text-gray-500 hover:text-gray-700': tab !== 'followers'}"
                class="py-4 px-4 block font-medium border-b-2 focus:outline-none transition-colors duration-200"
                {{ if $profileData.IsOwnProfile }}
                  hx-get="/api/profile/followers"
                {{ else }}
                  hx-get="/api/users/{{ $profileData.User.ID }}/followers"
                {{ end }}
                hx-trigger="tabChange"
                hx-target="#tab-content"
                hx-indicator="#tab-loader"
              >
                フォロワー
              </button>
              <!-- フォロー中タブ -->
              <button
                @click="loadTab('following', $event)"
                :class="{'border-blue-500 text-blue-600': tab === 'following', 'border-transparent text-gray-500 hover:text-gray-700': tab !== 'following'}"
                class="py-4 px-4 block font-medium border-b-2 focus:outline-none transition-colors duration-200"
                {{ if $profileData.IsOwnProfile }}
                  hx-get="/api/profile/following"
                {{ else }}
                  hx-get="/api/users/{{ $profileData.User.ID }}/following"
                {{ end }}
                hx-trigger="tabChange"
                hx-target="#tab-content"
                hx-indicator="#tab-loader"
              >
                フォロー中
              </button>
            </nav>
          </div>

          <!-- タブコンテンツ -->
          <div class="p-6 relative min-h-[300px]">
            <!-- htmx読み込み中のローディングインジケーター -->
            <div
              id="tab-loader"
              class="htmx-indicator absolute inset-0 bg-white bg-opacity-50 flex items-center justify-center"
            >
              <i class="fa-solid fa-spinner fa-spin text-2xl text-blue-600"></i>
            </div>

            <!-- htmxによってコンテンツが挿入される場所 -->
            <div id="tab-content">
              <!-- 初期表示コンテンツ（作成した部屋） -->
              <div>
                <h3 class="text-xl font-bold mb-4 text-gray-800">
                  作成した部屋
                </h3>
                {{ if $profileData.Rooms }}
                  <div class="space-y-4">
                    {{ range $profileData.Rooms }}
                      <div
                        class="bg-gray-50 p-4 rounded-lg border border-gray-200 {{ if .IsClickable }}
                          cursor-pointer hover:bg-gray-100 transition-colors
                        {{ else }}
                          cursor-default
                        {{ end }}"
                        {{ if .IsClickable }}
                          onclick="window.location.href='/rooms/{{ .ID }}'"
                        {{ end }}
                      >
                        <div class="flex justify-between items-start mb-2">
                          <h4 class="font-semibold text-gray-800">
                            {{ .Name }}
                          </h4>
                          <span class="text-xs text-gray-500"
                            >{{ .CreatedAt }}</span
                          >
                        </div>
                        {{ if .Description }}
                          <p class="text-sm text-gray-600 mb-2">
                            {{ .Description }}
                          </p>
                        {{ end }}
                        <div
                          class="flex items-center space-x-4 text-xs text-gray-500"
                        >
                          <span>{{ .GameVersion }}</span>
                          <span>{{ .PlayerCount }}</span>
                          <span class="{{ .StatusColor }}">{{ .Status }}</span>
                        </div>
                      </div>
                    {{ end }}
                  </div>
                {{ else }}
                  <div class="text-center py-8">
                    <i
                      class="fa-solid fa-door-open text-gray-300 text-4xl mb-3"
                    ></i>
                    <p class="text-gray-500">まだ部屋を作成していません</p>
                    <p class="text-sm text-gray-400 mt-1">
                      部屋を作成して他のハンターと狩りに出かけましょう！
                    </p>
                  </div>
                {{ end }}
              </div>
            </div>
          </div>
        </div>
      </section>
    </main>
  </div>

  <!-- フォロー解除確認モーダル -->
  <div
    id="unfollow-modal"
    class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden"
  >
    <div class="bg-white rounded-lg p-6 max-w-md w-full mx-4">
      <h3 class="text-lg font-semibold text-gray-900 mb-4">
        フォロー解除の確認
      </h3>
      <p class="text-gray-600 mb-6" id="unfollow-message">
        <!-- JavaScriptで動的に設定 -->
      </p>
      <div class="flex space-x-3">
        <button
          id="confirm-unfollow"
          class="flex-1 bg-red-500 hover:bg-red-600 text-white font-medium py-2 px-4 rounded-lg transition-colors duration-200"
        >
          解除する
        </button>
        <button
          onclick="hideUnfollowModal()"
          class="flex-1 bg-gray-200 hover:bg-gray-300 text-gray-800 font-medium py-2 px-4 rounded-lg transition-colors duration-200"
        >
          キャンセル
        </button>
      </div>
    </div>
  </div>
{{ end }}
